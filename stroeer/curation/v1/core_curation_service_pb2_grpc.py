# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from stroeer.curation.v1 import core_curation_service_pb2 as stroeer_dot_curation_dot_v1_dot_core__curation__service__pb2


class CurationServiceStub(object):
    """*
    This services allows to query curations within the CMS. In the CMS domain
    this is implemented as `Lists` which usually contain one ore more `Articles`.

    @CodeBlockStart protobuf
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCuration = channel.unary_unary(
                '/stroeer.curation.v1.CurationService/GetCuration',
                request_serializer=stroeer_dot_curation_dot_v1_dot_core__curation__service__pb2.GetCurationRequest.SerializeToString,
                response_deserializer=stroeer_dot_curation_dot_v1_dot_core__curation__service__pb2.GetCurationResponse.FromString,
                )
        self.BatchGetCuration = channel.unary_unary(
                '/stroeer.curation.v1.CurationService/BatchGetCuration',
                request_serializer=stroeer_dot_curation_dot_v1_dot_core__curation__service__pb2.BatchGetCurationRequest.SerializeToString,
                response_deserializer=stroeer_dot_curation_dot_v1_dot_core__curation__service__pb2.BatchGetCurationResponse.FromString,
                )


class CurationServiceServicer(object):
    """*
    This services allows to query curations within the CMS. In the CMS domain
    this is implemented as `Lists` which usually contain one ore more `Articles`.

    @CodeBlockStart protobuf
    """

    def GetCuration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchGetCuration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CurationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCuration': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCuration,
                    request_deserializer=stroeer_dot_curation_dot_v1_dot_core__curation__service__pb2.GetCurationRequest.FromString,
                    response_serializer=stroeer_dot_curation_dot_v1_dot_core__curation__service__pb2.GetCurationResponse.SerializeToString,
            ),
            'BatchGetCuration': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchGetCuration,
                    request_deserializer=stroeer_dot_curation_dot_v1_dot_core__curation__service__pb2.BatchGetCurationRequest.FromString,
                    response_serializer=stroeer_dot_curation_dot_v1_dot_core__curation__service__pb2.BatchGetCurationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'stroeer.curation.v1.CurationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CurationService(object):
    """*
    This services allows to query curations within the CMS. In the CMS domain
    this is implemented as `Lists` which usually contain one ore more `Articles`.

    @CodeBlockStart protobuf
    """

    @staticmethod
    def GetCuration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stroeer.curation.v1.CurationService/GetCuration',
            stroeer_dot_curation_dot_v1_dot_core__curation__service__pb2.GetCurationRequest.SerializeToString,
            stroeer_dot_curation_dot_v1_dot_core__curation__service__pb2.GetCurationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchGetCuration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stroeer.curation.v1.CurationService/BatchGetCuration',
            stroeer_dot_curation_dot_v1_dot_core__curation__service__pb2.BatchGetCurationRequest.SerializeToString,
            stroeer_dot_curation_dot_v1_dot_core__curation__service__pb2.BatchGetCurationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
